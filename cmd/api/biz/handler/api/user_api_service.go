// Code generated by hertz generator.

package api

import (
	"Mini_DouYin/cmd/api/biz/dao"
	"Mini_DouYin/cmd/api/biz/mw"
	"Mini_DouYin/cmd/api/biz/rpc"
	"Mini_DouYin/common/consts/errmsg"
	"Mini_DouYin/kitex_gen/user"
	"context"
	"time"

	api "Mini_DouYin/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var req api.RegisterReq
	var err error
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResp)
	rgResp, err := rpc.Register(ctx, &user.RegisterReq{ // rpc调用服务进行注册
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	if rgResp.Base.Code != consts.StatusOK{
		resp.StatusCode = rgResp.Base.Code
		resp.StatusMsg = rgResp.Base.Errmsg
		c.JSON(consts.StatusOK, resp)
		return
	}


	token,expire,err := mw.GenToken(rgResp.UserID) // 生成token
	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = errmsg.GENTOKENFAILED
		c.JSON(consts.StatusOK, resp)
		return
	}
	dao.StoreToken(rgResp.UserID,token,expire.Sub(time.Now())) // 存储token

	resp.UserID = rgResp.UserID
	resp.Token = token

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx,c)  // 调用jwt中间函数提供的登录路由功能，该函数会在登陆的时候去调用在mw中定义的Authenticator登录校验函数
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserInfoResp)
	resp.User = new(api.User)
	infoResp, err := rpc.GetUserInfo(ctx, &user.UserInfoReq{
		UserIDS: []int64{req.UserID},
	})

	if err != nil {
		resp.StatusCode = consts.StatusInternalServerError
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	if infoResp.Base.Code != consts.StatusOK{
		resp.StatusCode = infoResp.Base.Code
		resp.StatusMsg = infoResp.Base.Errmsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	user := infoResp.Users[0]

	resp.User.ID = user.Id
	resp.User.Name =  user.Name
	resp.User.FollowCount =  user.FollowCount
	resp.User.FollowerCount =  user.FollowerCount
	resp.User.IsFollow = true
	c.JSON(consts.StatusOK, resp)
}
