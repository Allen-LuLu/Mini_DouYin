// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publish

import (
	publish "Mini_DouYin/kitex_gen/publish"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceInfo
}

var publishServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Publish"
	handlerType := (*publish.Publish)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action": kitex.NewMethodInfo(actionHandler, newPublishActionArgs, newPublishActionResult, false),
		"List":   kitex.NewMethodInfo(listHandler, newPublishListArgs, newPublishListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishActionArgs)
	realResult := result.(*publish.PublishActionResult)
	success, err := handler.(publish.Publish).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishActionArgs() interface{} {
	return publish.NewPublishActionArgs()
}

func newPublishActionResult() interface{} {
	return publish.NewPublishActionResult()
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishListArgs)
	realResult := result.(*publish.PublishListResult)
	success, err := handler.(publish.Publish).List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishListArgs() interface{} {
	return publish.NewPublishListArgs()
}

func newPublishListResult() interface{} {
	return publish.NewPublishListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *publish.ActionReq) (r *publish.ActionResp, err error) {
	var _args publish.PublishActionArgs
	_args.Req = req
	var _result publish.PublishActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, req *publish.ListReq) (r *publish.ListResp, err error) {
	var _args publish.PublishListArgs
	_args.Req = req
	var _result publish.PublishListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
